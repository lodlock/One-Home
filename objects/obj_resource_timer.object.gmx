<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

sprite = spr_resource;
npc = "";
if(global.debug) time = 3;
else time = 30;

type = "";
amount = 0;


yy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the callback

var count = 0;
var size = array_height_2d(global.ls_resources);

repeat(size){
    if(global.ls_resources[count,0] == type){ 
        global.ls_resources[count,1] += amount;
        npc.is_fetching = false;
        f_text = instance_create(obj_player.x,obj_player.y,obj_floating_text);
        f_text.text = "+";
        switch(type){
            case "Wood":
                f_text.resource_spr = spr_Wood_Mini;
                break;
            case "Utilities":
                f_text.resource_spr = spr_Utilities_Mini
                break;
            case "Metal":
                f_text.resource_spr = spr_Metal_Mini
                break;
            case "Plastic":
                f_text.resource_spr = spr_Plastic_Mini
                break;
            case "Glass / Stone":
                f_text.resource_spr = spr_Glass_Stone_Mini
                break;
        }
    }
        
    count++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decrease timer
if(global.mv_free)
    time -= 1/room_speed;

if(time &lt;= 0) instance_destroy();

// Not the best solution, but worked so far (improve later), 
// need a way to create an ordered array and position the sprites
// accordingly.
for (i = 0; i &lt; instance_number(obj_resource_timer); i += 1){
    obj = instance_find(obj_resource_timer,i);
    obj.yy = 16 + i*40;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the buff

switch(type){
    case "Glass / Stone":
        sprite = spr_Glass_Stone;
        break;
    case "Wood":
        sprite = spr_Wood;
        break;
    case "Utilities":
        sprite = spr_Utilities;
        break;
    case "Metal":
        sprite = spr_Metal;
        break;
    case "Plastic":
        sprite = spr_Plastic;
        break;
}

draw_sprite(sprite,0,window_get_width() - 48, yy);

var seconds = string(time);
seconds = ExplodeString(".",seconds);
seconds = seconds[1];
draw_set_font(fnt_Helvetica_Neue);
draw_set_color(c_black);
draw_text(window_get_width() - 85, yy+7, seconds + "s");
draw_set_color(c_white);
draw_text(window_get_width() - 84, yy+6, seconds + "s");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
